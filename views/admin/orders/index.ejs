<%- include('../../partials/_admin-navbar') %>
<main class="admin-container fade-in">
  <header class="admin-header">
    <h1><i class="fas fa-clipboard-list"></i> Order Management</h1>
    <p>View and manage customer orders</p>
  </header>

  <!-- Search and Filter Section -->
  <div class="search-filter-section fade-in">
    <form action="/admin/orders" method="GET" class="search-form">
      <div class="search-grid">
        <div class="search-group">
          <label for="searchOrderId">Search by Order ID</label>
          <input type="text" id="searchOrderId" name="orderId" value="<%= query.orderId || '' %>" 
                 placeholder="Enter order ID..." class="form-control">
        </div>
        <div class="search-group">
          <label for="searchCustomer">Search by Customer</label>
          <input type="text" id="searchCustomer" name="customer" value="<%= query.customer || '' %>" 
                 placeholder="Customer name or email..." class="form-control">
        </div>
        <div class="search-group">
          <label for="filterStatus">Filter by Status</label>
          <select id="filterStatus" name="status" class="form-control">
            <option value="">All Statuses</option>
            <option value="pending" <%= query.status === 'pending' ? 'selected' : '' %>>Pending</option>
            <option value="processing" <%= query.status === 'processing' ? 'selected' : '' %>>Processing</option>
            <option value="shipped" <%= query.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
            <option value="delivered" <%= query.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
            <option value="cancelled" <%= query.status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
          </select>
        </div>
        <div class="search-group">
          <label for="filterDate">Filter by Date</label>
          <select id="filterDate" name="dateFilter" class="form-control">
            <option value="">All Dates</option>
            <option value="today" <%= query.dateFilter === 'today' ? 'selected' : '' %>>Today</option>
            <option value="week" <%= query.dateFilter === 'week' ? 'selected' : '' %>>This Week</option>
            <option value="month" <%= query.dateFilter === 'month' ? 'selected' : '' %>>This Month</option>
            <option value="year" <%= query.dateFilter === 'year' ? 'selected' : '' %>>This Year</option>
          </select>
        </div>
      </div>
      <div class="search-actions">
        <button type="submit" class="btn btn-primary">
          <i class="fas fa-search"></i> Search
        </button>
        <a href="/admin/orders" class="btn btn-secondary">
          <i class="fas fa-times"></i> Clear
        </a>
      </div>
    </form>
  </div>

  <!-- Orders Summary -->
  <div class="orders-summary fade-in">
    <div class="summary-card">
      <h3>Total Orders</h3>
      <p class="summary-number"><%= orders.length %></p>
    </div>
    <div class="summary-card">
      <h3>Pending</h3>
      <p class="summary-number pending"><%= orders.filter(o => o.status === 'pending').length %></p>
    </div>
    <div class="summary-card">
      <h3>Processing</h3>
      <p class="summary-number processing"><%= orders.filter(o => o.status === 'processing').length %></p>
    </div>
    <div class="summary-card">
      <h3>Delivered</h3>
      <p class="summary-number delivered"><%= orders.filter(o => o.status === 'delivered').length %></p>
    </div>
  </div>

  <!-- Admin Tools Section -->
  <div class="admin-tools-section fade-in">
    <h3><i class="fas fa-tools"></i> Admin Tools</h3>
    <div class="tools-grid">
      <button class="btn btn-warning" onclick="fixExistingOrders()">
        <i class="fas fa-wrench"></i> Fix Existing Orders
      </button>
      <button class="btn btn-info" onclick="refreshStats()">
        <i class="fas fa-sync-alt"></i> Refresh Statistics
      </button>
      <button class="btn btn-success" onclick="exportOrders()">
        <i class="fas fa-download"></i> Export Orders
      </button>
    </div>
  </div>

  <% if (orders && orders.length > 0) { %>
    <div class="orders-table fade-in">
      <div class="table-header">
        <h3>Orders (<%= orders.length %> found)</h3>
        <div class="table-actions">
          <!-- Bulk Actions -->
          <div class="bulk-actions" style="display: none;">
            <select id="bulkAction" class="form-control">
              <option value="">Select Action</option>
              <option value="update-status">Update Status</option>
              <option value="delete">Delete Orders</option>
            </select>
            <select id="bulkStatus" class="form-control" style="display: none;">
              <option value="">Select Status</option>
              <option value="pending">Pending</option>
              <option value="processing">Processing</option>
              <option value="shipped">Shipped</option>
              <option value="delivered">Delivered</option>
              <option value="cancelled">Cancelled</option>
            </select>
            <button id="applyBulkAction" class="btn btn-warning" disabled>
              <i class="fas fa-check"></i> Apply
            </button>
            <button id="cancelBulkAction" class="btn btn-secondary">
              <i class="fas fa-times"></i> Cancel
            </button>
          </div>
          <button id="selectAllBtn" class="btn btn-info">
            <i class="fas fa-check-square"></i> Select All
          </button>
          <button class="btn btn-success" onclick="exportOrders()">
            <i class="fas fa-download"></i> Export
          </button>
        </div>
      </div>
      <table>
        <thead>
          <tr>
            <th width="50">
              <input type="checkbox" id="selectAll" class="order-checkbox">
            </th>
            <th>Order ID</th>
            <th>Customer</th>
            <th>Total</th>
            <th>Status</th>
            <th>Payment</th>
            <th>Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% orders.forEach(order => { %>
            <tr>
              <td>
                <input type="checkbox" class="order-checkbox" value="<%= order._id %>">
              </td>
              <td>
                <span class="order-id"><%= order._id.toString().substring(0, 8) %>...</span>
                <small class="order-id-full" style="display: none;"><%= order._id %></small>
              </td>
              <td>
                <div class="customer-info">
                  <strong><%= order.customerName || (order.user ? order.user.name : 'Guest') %></strong>
                  <small><%= order.customerEmail || (order.user ? order.user.email : '-') %></small>
                </div>
              </td>
              <td><strong>$<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></strong></td>
              <td>
                <span class="status-badge status-<%= order.status.toLowerCase() %>">
                  <i class="fas fa-circle"></i> <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                </span>
              </td>
              <td>
                <span class="payment-badge status-<%= order.paymentStatus.toLowerCase() %>">
                  <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                </span>
              </td>
              <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
              <td>
                <div class="action-buttons">
                  <a href="/admin/orders/<%= order._id %>" class="btn btn-primary btn-sm" aria-label="View Order">
                    <i class="fas fa-eye"></i> View
                  </a>
                  <button class="btn btn-secondary btn-sm" onclick="copyOrderId('<%= order._id %>')" aria-label="Copy Order ID">
                    <i class="fas fa-copy"></i>
                  </button>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  <% } else { %>
    <div class="no-orders fade-in">
      <div class="empty-state">
        <i class="fas fa-box-open"></i>
        <h3>No orders found</h3>
        <p><%= Object.keys(query).length > 0 ? 'Try adjusting your search criteria.' : 'Orders will appear here when customers make purchases.' %></p>
        <% if (Object.keys(query).length > 0) { %>
          <a href="/admin/orders" class="btn btn-primary">View All Orders</a>
        <% } %>
      </div>
    </div>
  <% } %>
  
  <div style="margin-top: 2rem;">
    <a href="/admin/dashboard" class="btn btn-secondary" style="text-decoration: none;">
      <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
  </div>
</main>

<script>
// Copy order ID to clipboard
function copyOrderId(orderId) {
  navigator.clipboard.writeText(orderId).then(function() {
    showNotification('Order ID copied to clipboard!', 'success');
  }).catch(function() {
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = orderId;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    showNotification('Order ID copied to clipboard!', 'success');
  });
}

// Fix existing orders functionality
function fixExistingOrders() {
  if (!confirm('This will fix orders with missing customer information. Continue?')) {
    return;
  }
  
  showNotification('Fixing existing orders...', 'info');
  
  fetch('/admin/orders/fix-existing', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showNotification(data.message, 'success');
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } else {
      showNotification(data.message, 'error');
    }
  })
  .catch(error => {
    console.error('Fix orders error:', error);
    showNotification('Error fixing existing orders', 'error');
  });
}

// Refresh statistics
function refreshStats() {
  showNotification('Refreshing statistics...', 'info');
  
  fetch('/admin/orders/stats')
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showNotification('Statistics refreshed successfully', 'success');
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      showNotification('Error refreshing statistics', 'error');
    }
  })
  .catch(error => {
    console.error('Refresh stats error:', error);
    showNotification('Error refreshing statistics', 'error');
  });
}

// Enhanced export orders functionality
function exportOrders() {
  const currentUrl = new URL(window.location);
  const exportUrl = '/admin/orders/export?' + currentUrl.searchParams.toString();
  
  showNotification('Preparing export...', 'info');
  
  // Create a temporary link to trigger download
  const link = document.createElement('a');
  link.href = exportUrl;
  link.download = 'orders.csv';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  showNotification('Export started! Check your downloads.', 'success');
}

// Show notification
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
    <span>${message}</span>
  `;
  
  const bgColor = type === 'success' ? '#a8e6cf' : type === 'error' ? '#e74c3c' : '#4361EE';
  
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${bgColor};
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    z-index: 10001;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    font-weight: 500;
  `;
  
  document.body.appendChild(notification);
  
  // Animate in
  setTimeout(() => {
    notification.style.transform = 'translateX(0)';
  }, 10);
  
  // Remove after 3 seconds
  setTimeout(() => {
    notification.style.transform = 'translateX(100%)';
    setTimeout(() => {
      notification.remove();
    }, 300);
  }, 3000);
}

// Bulk operations functionality
document.addEventListener('DOMContentLoaded', function() {
  const selectAllCheckbox = document.getElementById('selectAll');
  const orderCheckboxes = document.querySelectorAll('.order-checkbox:not(#selectAll)');
  const bulkActions = document.querySelector('.bulk-actions');
  const selectAllBtn = document.getElementById('selectAllBtn');
  const bulkActionSelect = document.getElementById('bulkAction');
  const bulkStatusSelect = document.getElementById('bulkStatus');
  const applyBulkBtn = document.getElementById('applyBulkAction');
  const cancelBulkBtn = document.getElementById('cancelBulkAction');

  // Select all functionality
  selectAllCheckbox.addEventListener('change', function() {
    orderCheckboxes.forEach(checkbox => {
      checkbox.checked = this.checked;
    });
    updateBulkActions();
  });

  // Individual checkbox change
  orderCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      updateBulkActions();
    });
  });

  // Select all button
  selectAllBtn.addEventListener('click', function() {
    const allChecked = Array.from(orderCheckboxes).every(cb => cb.checked);
    orderCheckboxes.forEach(checkbox => {
      checkbox.checked = !allChecked;
    });
    selectAllCheckbox.checked = !allChecked;
    updateBulkActions();
  });

  // Bulk action select change
  bulkActionSelect.addEventListener('change', function() {
    if (this.value === 'update-status') {
      bulkStatusSelect.style.display = 'inline-block';
    } else {
      bulkStatusSelect.style.display = 'none';
    }
    updateApplyButton();
  });

  // Apply bulk action
  applyBulkBtn.addEventListener('click', function() {
    const selectedOrders = Array.from(orderCheckboxes)
      .filter(cb => cb.checked)
      .map(cb => cb.value);
    
    const action = bulkActionSelect.value;
    const status = bulkStatusSelect.value;
    
    if (action === 'update-status' && !status) {
      showNotification('Please select a status', 'error');
      return;
    }
    
    if (action === 'delete') {
      if (!confirm(`Are you sure you want to delete ${selectedOrders.length} orders? This action cannot be undone.`)) {
        return;
      }
    }
    
    // Send bulk action request
    fetch('/admin/orders/bulk-action', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: action,
        orderIds: selectedOrders,
        status: status
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showNotification(data.message, 'success');
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        showNotification(data.message, 'error');
      }
    })
    .catch(error => {
      console.error('Bulk action error:', error);
      showNotification('Error performing bulk action', 'error');
    });
  });

  // Cancel bulk action
  cancelBulkBtn.addEventListener('click', function() {
    orderCheckboxes.forEach(checkbox => {
      checkbox.checked = false;
    });
    selectAllCheckbox.checked = false;
    bulkActions.style.display = 'none';
    selectAllBtn.style.display = 'inline-block';
  });

  function updateBulkActions() {
    const checkedCount = Array.from(orderCheckboxes).filter(cb => cb.checked).length;
    
    if (checkedCount > 0) {
      bulkActions.style.display = 'flex';
      selectAllBtn.style.display = 'none';
    } else {
      bulkActions.style.display = 'none';
      selectAllBtn.style.display = 'inline-block';
    }
    
    updateApplyButton();
  }

  function updateApplyButton() {
    const action = bulkActionSelect.value;
    const status = bulkStatusSelect.value;
    const checkedCount = Array.from(orderCheckboxes).filter(cb => cb.checked).length;
    
    if (checkedCount > 0 && action && (action !== 'update-status' || status)) {
      applyBulkBtn.disabled = false;
    } else {
      applyBulkBtn.disabled = true;
    }
  }
});

// Auto-submit form when filters change
document.getElementById('filterStatus').addEventListener('change', function() {
  if (this.value) {
    document.querySelector('.search-form').submit();
  }
});

document.getElementById('filterDate').addEventListener('change', function() {
  if (this.value) {
    document.querySelector('.search-form').submit();
  }
});
</script>

<style>
.search-filter-section {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.search-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-bottom: 1rem;
}

.search-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: #495057;
}

.search-actions {
  display: flex;
  gap: 1rem;
  align-items: end;
}

.orders-summary {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.summary-card {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  text-align: center;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.summary-card h3 {
  margin: 0 0 0.5rem 0;
  font-size: 0.9rem;
  color: #6c757d;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.summary-number {
  margin: 0;
  font-size: 2rem;
  font-weight: 700;
  color: #4361EE;
}

.summary-number.pending {
  color: #ffc107;
}

.summary-number.processing {
  color: #17a2b8;
}

.summary-number.delivered {
  color: #28a745;
}

.orders-table {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.table-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.table-header h3 {
  margin: 0;
  color: #2c3e50;
}

.table-actions {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.bulk-actions {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.bulk-actions select {
  min-width: 120px;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid #e9ecef;
}

th {
  background: #f8f9fa;
  font-weight: 600;
  color: #495057;
}

tr:hover {
  background: #f8f9fa;
}

.order-checkbox {
  width: 18px;
  height: 18px;
  cursor: pointer;
}

.order-id {
  font-family: monospace;
  font-weight: 600;
}

.customer-info {
  display: flex;
  flex-direction: column;
}

.customer-info small {
  color: #6c757d;
  font-size: 0.8rem;
}

.status-badge {
  padding: 0.3em 1em;
  border-radius: 12px;
  font-size: 0.8em;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  gap: 0.3rem;
}

.status-badge.status-pending {
  background: #fff3cd;
  color: #856404;
}

.status-badge.status-processing {
  background: #cce5ff;
  color: #004085;
}

.status-badge.status-shipped {
  background: #d1ecf1;
  color: #0c5460;
}

.status-badge.status-delivered {
  background: #d4edda;
  color: #155724;
}

.status-badge.status-cancelled {
  background: #f8d7da;
  color: #721c24;
}

.payment-badge {
  padding: 0.2em 0.8em;
  border-radius: 8px;
  font-size: 0.8em;
  font-weight: 600;
}

.payment-badge.status-completed {
  background: #d4edda;
  color: #155724;
}

.payment-badge.status-pending {
  background: #fff3cd;
  color: #856404;
}

.payment-badge.status-failed {
  background: #f8d7da;
  color: #721c24;
}

.action-buttons {
  display: flex;
  gap: 0.5rem;
}

.btn-sm {
  padding: 0.3rem 0.6rem;
  font-size: 0.8rem;
}

.empty-state {
  text-align: center;
  padding: 3rem 1rem;
}

.empty-state i {
  font-size: 3rem;
  color: #6c757d;
  margin-bottom: 1rem;
}

.empty-state h3 {
  margin-bottom: 0.5rem;
  color: #2c3e50;
}

.empty-state p {
  color: #6c757d;
  margin-bottom: 1.5rem;
}

@media (max-width: 768px) {
  .search-grid {
    grid-template-columns: 1fr;
  }
  
  .search-actions {
    flex-direction: column;
  }
  
  .orders-summary {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .table-header {
    flex-direction: column;
    gap: 1rem;
    align-items: flex-start;
  }
  
  .table-actions {
    flex-direction: column;
    width: 100%;
  }
  
  .bulk-actions {
    flex-direction: column;
    width: 100%;
  }
  
  .action-buttons {
    flex-direction: column;
  }
  
  table {
    font-size: 0.9rem;
  }
  
  th, td {
    padding: 0.5rem;
  }
}

.admin-tools-section {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.admin-tools-section h3 {
  margin: 0 0 1rem 0;
  color: #2c3e50;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.tools-grid {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.tools-grid .btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.8rem 1.2rem;
  font-weight: 600;
  transition: all 0.3s ease;
}

.tools-grid .btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}
</style>
<!-- All admin styles are now in style.css -->